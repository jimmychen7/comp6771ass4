// Element
template <typename T>
btree<T>::Node::Element::Element()
    : value_{}
    , leftChild_{std::make_shared<Node>(Node())}
    , rightChild_{std::make_shared<Node>(Node())} {
}

template <typename T>
btree<T>::Node::Element::~Element() {
}

template <typename T>
btree<T>::Node::Element::Element(T value)
    : Element() {
    value_ = value;
}

template <typename T>
T btree<T>::Node::Element::getValue() const{
    return value_;
}

template <typename T>
std::shared_ptr<typename btree<T>::Node>
        btree<T>::Node::Element::getLeftChild() const{
    return leftChild_;
}

template <typename T>
std::shared_ptr<typename btree<T>::Node>
        btree<T>::Node::Element::getRightChild() const{
    return rightChild_;
}
template <typename T>
void btree<T>::Node::Element::setValue(T value) {
    value_ = value;
}
            
template <typename T>
void btree<T>::Node::Element::setLeftChild(std::shared_ptr<Node> sharedPtr) {
    leftChild_ = sharedPtr;
}

template <typename T>
void btree<T>::Node::Element::setRightChild(std::shared_ptr<Node> sharedPtr) {
    rightChild_ = sharedPtr;
}

// Node
template <typename T>
btree<T>::Node::Node()
    : elems_{std::vector<Element>()} {
}

template <typename T>
btree<T>::Node::Node(std::nullptr_t) 
    : elems_{std::vector<Element>()} {
}

template <typename T>
btree<T>::Node::~Node() {
}

template <typename T>
bool btree<T>::Node::isEmpty() {
    return elems_.empty();
}

template <typename T>
typename btree<T>::Node::Element* btree<T>::Node::addElement(const T& elem) {
    typedef typename btree<T>::Node::Element Element;
    auto newElems = elems_;
    newElems.push_back(Element(elem));
    int index = 0;
    std::sort( newElems.begin( ), newElems.end( )
        , [ ]( const Element& lhs
                , const Element& rhs ) {
                    return lhs.getValue() < rhs.getValue();
                });
    
    if(newElems.size() > 1) {
        for(unsigned int i = 0; i < elems_.size(); ++i) {
            if(newElems.at(i).getValue() == elem) {
                index = i;
                Element e = newElems.at(i);
                if(i == 0) {
                    Element next = newElems.at(i+1); 
                    e.setRightChild(next.getLeftChild());
                } else if (i == elems_.size() -1 ) {
                    Element prev = newElems.at(i-1);
                    e.setLeftChild(prev.getRightChild());
                } else {
                    Element prev = newElems.at(i-1);
                    Element next = newElems.at(i+1);
                    e.setRightChild(next.getLeftChild());
                    e.setLeftChild(prev.getRightChild());
                }
            }
        }
    }
    
    elems_ = newElems;
    return &elems_.at(index);
}

// btree
template <typename T>
btree<T>::btree(size_t maxNodeElems)
    : root_{std::make_shared<Node>(Node())}
    , maxNodeElems_{maxNodeElems} {
}

template <typename T>
btree<T>::btree(const btree<T>& original)
    : btree(original.maxNodeElems_) {
    copyTree(*this->root_.get(), *original.root_.get());
}

template <typename T>
btree_iterator<T> btree<T>::find(const T& elem) {
    //TODO
    typedef typename btree<T>::Node::Element Element;
    
    auto nodesToSearch = std::queue<std::shared_ptr<Node>>();
    nodesToSearch.push(root_);
    
    while(!nodesToSearch.empty()) {
    
        Node *node = nodesToSearch.front().get();
        nodesToSearch.pop();
        auto& elems = node->elems_;
        
        if(elems.size() > 2) {
        
            Element &currElem = elems.at(0);
            
            if(currElem.getValue() == elem) {
                return btree_iterator<T>(*this, &currElem);
            } else if(elem < currElem.getValue()) {
                std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
                continue;
            }
            
            currElem = elems.at(elems.size() - 1);
            
            if(currElem.getValue() == elem) {
                return btree_iterator<T>(*this, &currElem);
            } else if(currElem.getValue() < elem) {
                std::shared_ptr<Node> nodeToSearch = currElem.getRightChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
                continue;
            }
            
            for (unsigned int i = 1; i < elems.size(); ++i) {
                currElem = elems.at(i);
                if(currElem.getValue() == elem) {
                    return btree_iterator<T>(*this, &elems.at(i));
                } else if(elem < currElem.getValue()) {
                    std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                    break;
                }
            }
            
        } else {
            for (unsigned int i = 0; i < elems.size(); i++) {
                Element &currElem = elems.at(i);
                if(currElem.getValue() == elem) {
                    return btree_iterator<T>(*this, &currElem);
                } else if(elem < currElem.getValue()) {
                    std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                    break;
                } else if(i == elems.size() - 1) {
                    //last elem in the node
                    std::shared_ptr<Node> nodeToSearch = currElem.getRightChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                }
            }
        }
    }
    return end();
}


template <typename T>
const_btree_iterator<T> btree<T>::find(const T& elem) const {
    //TODO    
    typedef typename btree<T>::Node::Element Element;
    
    auto nodesToSearch = std::queue<std::shared_ptr<Node>>();
    nodesToSearch.push(root_);
    
    while(!nodesToSearch.empty()) {
    
        Node *node = nodesToSearch.front().get();
        nodesToSearch.pop();
        auto& elems = node->elems_;
        
        if(elems.size() > 2) {
        
            Element &currElem = elems.at(0);
            
            if(currElem.getValue() == elem) {
                return const_btree_iterator<T>(*this, &currElem);
            } else if(elem < currElem.getValue()) {
                std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
                continue;
            }
            
            currElem = elems.at(elems.size() - 1);
            
            if(currElem.getValue() == elem) {
                return const_btree_iterator<T>(*this, &currElem);
            } else if(currElem.getValue() < elem) {
                std::shared_ptr<Node> nodeToSearch = currElem.getRightChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
                continue;
            }
            
            for (unsigned int i = 1; i < elems.size(); ++i) {
                currElem = elems.at(i);
                if(currElem.getValue() == elem) {
                    return const_btree_iterator<T>(*this, &elems.at(i));
                } else if(elem < currElem.getValue()) {
                    std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                    break;
                }
            }
            
        } else {
            for (unsigned int i = 0; i < elems.size(); i++) {
                Element &currElem = elems.at(i);
                if(currElem.getValue() == elem) {
                    return const_btree_iterator<T>(*this, &currElem);
                } else if(elem < currElem.getValue()) {
                    std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                    break;
                } else if(i == elems.size() - 1) {
                    //last elem in the node
                    std::shared_ptr<Node> nodeToSearch = currElem.getRightChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                }
            }
        }
    }
    return cend();
}

template <typename T>
std::pair<btree_iterator<T>, bool> btree<T>::insert(const T& elem) {
    //TODO
    typedef typename btree<T>::Node::Element Element;
    auto nodesToSearch = std::queue<std::shared_ptr<Node>>();
    nodesToSearch.push(root_);
    bool done = false;
    
    Element* newElem = nullptr;
    
    if(root_.get()->isEmpty()) {
        newElem = root_.get()->addElement(elem);
        done = true;
    }
    
    while(!nodesToSearch.empty() && !done) {
        Node *node = nodesToSearch.front().get();
        nodesToSearch.pop();
        
        if(node->elems_.size() < maxNodeElems_ 
            || node->isEmpty()) {
            // node is not full || node is empty
            //std::cout << "inserted into unfull node" << std::endl;
            newElem = node->addElement(elem);
            done = true;
            break;
        }
        
        auto elems = node->elems_;
    
        for(unsigned int i = 0; i < elems.size(); ++i) {
            Element currElem = elems.at(i);
            //std::cout << i << ": " << currElem->getValue() << std::endl;
            if(currElem.getValue() == elem) {
                //std::cout << i << "value exists" << std::endl;
                return std::pair<btree_iterator<T>, bool>
                            (btree_iterator<T>(*this, &elems.at(i)), false);
            } else if(elem < currElem.getValue()) {
                //std::cout << "go to left node" << std::endl;
                std::shared_ptr<Node> nodeToSearch = currElem.getLeftChild();
                nodesToSearch.push(nodeToSearch);
                break;
            } else if(i == elems.size() - 1) {
                //last elem in the node
                //std::cout << "go to right node" << std::endl;
                std::shared_ptr<Node> nodeToSearch = currElem.getRightChild();
                nodesToSearch.push(nodeToSearch);
            }
        }
    }
    
    if (!done) {
        throw std::runtime_error("not done");
    }
    
    return std::pair<btree_iterator<T>, bool>(
                                    btree_iterator<T>(*this, newElem) ,true);
}

template <typename T>
btree<T>::~btree() {
}

template <typename T>
std::ostream& operator<< (std::ostream& os, const btree<T>& tree) {
    typedef typename btree<T>::Node Node;
    auto nodesToPrint = std::queue<std::shared_ptr<Node>>();
    
    nodesToPrint.push(tree.root_);
    while(!nodesToPrint.empty()) {
        Node *node = nodesToPrint.front().get();
        nodesToPrint.pop();
        
        auto elements = node.elems_();
        
        for (unsigned int i = 0; i < elements.size(); ++i) {
            auto currElement = elements.at(i);
            if (i == 0 && node == tree.root_.get()) {
                // first element of root node
                os << currElement->getValue();
            } else {
                os << " " << currElement->getValue();
            }
        }
        
        if(elements.size() == tree.maxNodeElems_) {
            auto firstElement = elements.at(0);
            std::shared_ptr<Node> leftChildPtr = firstElement.getLeftChild();
            std::shared_ptr<Node> rightChildPtr = firstElement.getRightChild();
            if(!leftChildPtr.get()->isEmpty()) {
                nodesToPrint.push(leftChildPtr);
            }
            if(!rightChildPtr.get()->isEmpty()) {
                nodesToPrint.push(rightChildPtr);
            }
            for (unsigned int i = 1; i < elements.size(); i++) {
                auto currElement = elements.at(i);
                rightChildPtr = currElement.getRightChild();
                if(!rightChildPtr.get()->isEmpty()) {
                    nodesToPrint.push(rightChildPtr);
                }
            }
        }
        
    }
    os << std::endl;
    return os;
}

template <typename T>
void btree<T>::copyTree(Node& copy, Node& original) {
    copy.elems_ = original.elems_;
    
    if(original.isEmpty()) {
        return;
    }
    for (unsigned int i = 0; i < copy.elems_.size(); ++i) {
        copyTree(*copy.elems_.at(i).getLeftChild().get()
                , *original.elems_.at(i).getLeftChild().get());
        copyTree(*copy.elems_.at(i).getRightChild().get()
                , *original.elems_.at(i).getRightChild().get());
    }
}
    
    /*
    if (obj.size_ == 0) {
        return os << "[]";
    }
    
    unsigned int i = 0;
    os << "[";
    while (i < obj.size_ - 1)
    {
        os << obj.ev_[i] << " ";
        i++;
    }
    os << obj.ev_[i] << "]";
    return os;*/

