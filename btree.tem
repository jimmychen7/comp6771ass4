// Element
template <typename T>
btree<T>::Node::Element::Element()
    : leftChild_{std::make_shared<Node>(Node())}
    , rightChild_{std::make_shared<Node>(Node())} {
}

template <typename T>
btree<T>::Node::Element::~Element() {
}

template <typename T>
btree<T>::Node::Element::Element(T value)
    : Element() {
    value_ = value;
}

template <typename T>
T btree<T>::Node::Element::getValue() {
    return value_;
}

template <typename T>
std::shared_ptr<typename btree<T>::Node>
        btree<T>::Node::Element::getLeftChild() {
    return leftChild_;
}

template <typename T>
std::shared_ptr<typename btree<T>::Node>
        btree<T>::Node::Element::getRightChild() {
    return rightChild_;
}

template <typename T>
std::shared_ptr<typename btree<T>::Node>
        btree<T>::Node::Element::getParent() {
    return parent_;
}

template <typename T>
void btree<T>::Node::Element::setValue(T value) {
    value_ = value;
}
            
template <typename T>
void btree<T>::Node::Element::setLeftChild(std::shared_ptr<Node> sharedPtr) {
    leftChild_ = sharedPtr;
}

template <typename T>
void btree<T>::Node::Element::setRightChild(std::shared_ptr<Node> sharedPtr) {
    rightChild_ = sharedPtr;
}

template <typename T>
void btree<T>::Node::Element::setParent(std::shared_ptr<Node> sharedPtr) {
    parent_ = sharedPtr;
}

// Node
template <typename T>
btree<T>::Node::Node()
    : elems_{std::vector<std::shared_ptr<Element>>()} {
}

template <typename T>
btree<T>::Node::Node(std::nullptr_t) 
    : elems_{std::vector<std::shared_ptr<Element>>()} {
}

template <typename T>
btree<T>::Node::~Node() {
}

template <typename T>
bool btree<T>::Node::isEmpty() {
    return elems_.empty();
}

template <typename T>
std::vector<std::shared_ptr<typename btree<T>::Node::Element>>
btree<T>::Node::getElements() {
    return elems_;
}

template <typename T>
std::shared_ptr<typename btree<T>::Node::Element> btree<T>::Node::addElement(const T& elem) {
     auto newElem = std::make_shared<Element>(Element(elem));
     elems_.push_back(newElem);
     return newElem;
}

// btree
template <typename T>
btree<T>::btree(size_t maxNodeElems)
    : root_{std::make_shared<Node>(Node())}
    , maxNodeElems_{maxNodeElems} {
}

template <typename T>
btree<T>::btree(const btree<T>& original)
    : btree(original.maxNodeElems_) {
    
    typedef typename btree<T>::Node Node;
    auto nodesToCopy = std::queue<std::shared_ptr<Node>>();
    nodesToCopy.push(original.root_);
    
    while(!nodesToCopy.empty()) {
        Node *node = nodesToCopy.front().get();
        nodesToCopy.pop();
        
        auto elements = node->getElements();
        
        for (unsigned int i = 0; i < elements.size(); i++) {
            auto currElement = elements.at(i);
            insert(currElement->getValue());
        }
        
        if(sizeof(node->getElements()) == original.maxNodeElems_) {
            auto firstElement = elements.at(0);
            std::shared_ptr<Node> leftChildPtr = firstElement->getLeftChild();
            std::shared_ptr<Node> rightChildPtr = firstElement->getRightChild();
            if(leftChildPtr.get()->isEmpty()) {
                nodesToCopy.push(leftChildPtr);
            }
            if(rightChildPtr.get()->isEmpty()) {
                nodesToCopy.push(rightChildPtr);
            }
            for (unsigned int i = 1; i < elements.size(); i++) {
                auto currElement = elements.at(i);
                rightChildPtr = currElement->getRightChild();
                if(!rightChildPtr.get()->isEmpty()) {
                    nodesToCopy.push(rightChildPtr);
                }
            }
        }
    }
}

template <typename T>
btree_iterator<T> btree<T>::find(const T& elem) {
    //TODO
    
    std::cout << "find_non_const" << std::endl;
    
    typedef typename btree<T>::Node::Element Element;
    
    auto nodesToSearch = std::queue<std::shared_ptr<Node>>();
    nodesToSearch.push(root_);
    
    while(!nodesToSearch.empty()) {
        Node *node = nodesToSearch.front().get();
        nodesToSearch.pop();
        std::vector<std::shared_ptr<Element>> elems = node->getElements();
        
        for(unsigned int i = 0; i < elems.size(); ++i) {
            Element *currElem = elems.at(i).get();
            
            if(currElem->getValue() == elem) {
                return btree_iterator<T>(currElem);
            } else if(elem < currElem->getValue()) {
                std::shared_ptr<Node> nodeToSearch = currElem->getLeftChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
                break;
            } else if(i == elems.size() - 1) {
                //last elem in the node
                std::shared_ptr<Node> nodeToSearch = currElem->getRightChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
            }
        }
    }
    return end();
}


template <typename T>
const_btree_iterator<T> btree<T>::find(const T& elem) const {
    //TODO    
    typedef typename btree<T>::Node::Element Element;
    
    auto nodesToSearch = std::queue<std::shared_ptr<Node>>();
    nodesToSearch.push(root_);
    
    while(!nodesToSearch.empty()) {
    
        Node *node = nodesToSearch.front().get();
        nodesToSearch.pop();
        auto elems = node->getElements();
        for (unsigned int i = 0; i < elems.size(); i++) {
            Element *currElem = elems.at(i).get();
            
            if(currElem->getValue() == elem) {
                return const_btree_iterator<T>(currElem);
            } else if(elem < currElem->getValue()) {
                std::shared_ptr<Node> nodeToSearch = currElem->getLeftChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
                break;
            } else if(i == elems.size() - 1) {
                //last elem in the node
                std::shared_ptr<Node> nodeToSearch = currElem->getRightChild();
                if(!nodeToSearch.get()->isEmpty()) {
                    nodesToSearch.push(nodeToSearch);
                }
            }
        }
    }
    //std::cout << "returning cend()" << std::endl;
    return cend();
}

template <typename T>
std::pair<btree_iterator<T>, bool> btree<T>::insert(const T& elem) {
    //TODO
    typedef typename btree<T>::Node::Element Element;
    auto nodesToSearch = std::queue<std::shared_ptr<Node>>();
    nodesToSearch.push(root_);
    bool done = false;
    auto newElem = std::shared_ptr<Element>();
    
    if(root_.get()->isEmpty()) {
        // root node is empty
        newElem = root_.get()->addElement(elem);
        done = true;
    }
    
    while(!nodesToSearch.empty() && !done) {
        Node *node = nodesToSearch.front().get();
        nodesToSearch.pop();
        auto elems = node->getElements();
        
        for(unsigned int i = 0; i < elems.size(); ++i) {
            Element *currElem = elems.at(i).get();
            if(currElem->getValue() == elem) {
                return std::pair<btree_iterator<T>, bool>
                                        (btree_iterator<T>(currElem), false);
            } else if(elem < currElem->getValue()) {
                if(sizeof(node->getElements()) == maxNodeElems_) {
                    std::shared_ptr<Node> nodeToSearch = currElem->getLeftChild();
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    }
                } else {
                    newElem = node->addElement(elem);
                    done = true;
                }
                break;
            } else if(i == elems.size() - 1) {
                //last elem in the node
                std::shared_ptr<Node> nodeToSearch = currElem->getRightChild();
                if(sizeof(node->getElements()) == maxNodeElems_) {
                    if(!nodeToSearch.get()->isEmpty()) {
                        nodesToSearch.push(nodeToSearch);
                    } else {
                        nodeToSearch->addElement(elem);
                    }
                } else {
                    node->addElement(elem);
                }
                done = true;
                break;
            }
        }
    }
    
    if (!done) {
        throw std::runtime_error("not done");
    }
    
    return std::pair<btree_iterator<T>, bool>(
                                    btree_iterator<T>(newElem) ,true);
}

template <typename T>
btree<T>::~btree() {
}

template <typename T>
std::ostream& operator<< (std::ostream& os, const btree<T>& tree) {
    typedef typename btree<T>::Node Node;
    auto nodesToPrint = std::queue<std::shared_ptr<Node>>();
    
    nodesToPrint.push(tree.root_);
    while(!nodesToPrint.empty()) {
        Node *node = nodesToPrint.front().get();
        nodesToPrint.pop();
        
        auto elements = node->getElements();
        
        for (unsigned int i = 0; i < elements.size(); i++) {
            auto currElement = elements.at(i);
            if (i == 0 && nodesToPrint.empty()) {
                // first element of root node
                os << currElement->getValue();
            } else {
                os << " " << currElement->getValue();
            }
        }
        
        if(sizeof(node->getElements()) == tree.maxNodeElems_) {
            auto firstElement = elements.at(0);
            std::shared_ptr<Node> leftChildPtr = firstElement->getLeftChild();
            std::shared_ptr<Node> rightChildPtr = firstElement->getRightChild();
            if(!leftChildPtr.get()->isEmpty()) {
                nodesToPrint.push(leftChildPtr);
            }
            if(!rightChildPtr.get()->isEmpty()) {
                nodesToPrint.push(rightChildPtr);
            }
            for (unsigned int i = 1; i < elements.size(); i++) {
                auto currElement = elements.at(i);
                rightChildPtr = currElement->getRightChild();
                if(!rightChildPtr.get()->isEmpty()) {
                    nodesToPrint.push(rightChildPtr);
                }
            }
        }
        
    }
    os << std::endl;
    return os;
}
    
    /*
    if (obj.size_ == 0) {
        return os << "[]";
    }
    
    unsigned int i = 0;
    os << "[";
    while (i < obj.size_ - 1)
    {
        os << obj.ev_[i] << " ";
        i++;
    }
    os << obj.ev_[i] << "]";
    return os;*/

